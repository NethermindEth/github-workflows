name: Publish Terraform Module

on:
  workflow_call:
    inputs:
      jfrog_url:
        description: 'URL of Artifactory server'
        type: string
        default: 'https://nethermind.jfrog.io'
      provider_name:
        description: 'Name of Terraform provider'
        type: string
        required: true
      module_name:
        description: 'Name of Terraform module'
        type: string
        required: true
      module_version:
        description: 'Version of Terraform module'
        type: string
        required: true
    secrets:
      artifactory_access_token:
        description: 'A token used to communicate with Artifactory'
        required: true

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up JFrog CLI
        uses: jfrog/setup-jfrog-cli@f748a0599171a192a2668afee8d0497f7c1069df # v4.5.6

      - name: Configure JFrog CLI
        shell: bash
        env:
          ARTIFACTORY_ACCESS_TOKEN: ${{ secrets.artifactory_access_token }}
          JFROG_URL: ${{ inputs.jfrog_url }}
        run: |
          echo "${ARTIFACTORY_ACCESS_TOKEN}" | jf config add nethermind \
            --url="${JFROG_URL}" \
            --interactive=false \
            --access-token-stdin

      - name: Configure Terraform registry
        shell: bash
        run: jf tfc --repo-deploy=local-angkor-terraform-module

      - name: Run Trivy vulnerability scanner in IaC mode
        id: trivy
        uses: aquasecurity/trivy-action@915b19bbe73b92a6cf82a1bc12b087c9a19a5fe2 # v0.28.0
        with:
          scan-type: 'config'
          scan-ref: '.'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
          output: 'trivy-results.txt'
        env:
          TRIVY_DB_REPOSITORY: public.ecr.aws/aquasecurity/trivy-db
          TRIVY_DISABLE_VEX_NOTICE: true

      - name: Publish Terraform module
        if: ${{ success() }}
        shell: bash
        run: |
          mkdir -p package
          rsync -Rr --exclude=".*" --exclude="package" ./ package/${{ inputs.module_name }}
          cd package/${{ inputs.module_name }}
          jf terraform publish \
            --namespace=nethermind \
            --provider=${{ inputs.provider_name }} \
            --tag ${{ inputs.module_version }}

      - name: Summary
        if: always()
        run: |
          echo "### Publish status" >> $GITHUB_STEP_SUMMARY
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Publish successful" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Publish failed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "### Trivy Scan Output" >> $GITHUB_STEP_SUMMARY
          if [[ -f trivy-results.txt ]]; then
            echo "<details><summary>Click to expand</summary>" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            while IFS= read -r line; do
              if [[ $line == "┌"* ]]; then echo '```' >> $GITHUB_STEP_SUMMARY; fi
              echo "$line" >> $GITHUB_STEP_SUMMARY
              if [[ $line == *"┘" ]]; then echo '```' >> $GITHUB_STEP_SUMMARY; fi
            done < trivy-results.txt
            echo "</details>" >> $GITHUB_STEP_SUMMARY
          else
            echo "No Trivy report found." >> $GITHUB_STEP_SUMMARY
          fi