on:
  workflow_call:
    inputs:
      jfrog_url:
        description: "URL of Artifactory server"
        type: string
        default: "nethermind.jfrog.io"
        required: false
      image_name:
        description: "Name of the image to publish.  Defaults to the repository name."
        type: string
        required: false
        default: "${{ github.event.repository.name }}"
      group_name:
        description: "Name of the group in Nethermind.  Example: nubia, kyoto, etc"
        type: string
        required: false
        default: ""
      target_env:
        description: "Target environment to promote to (either staging or prod)"
        type: string
        required: true
      source_env:
        description: "Source environment to promote from (either dev or staging)"
        type: string
        required: false
        default: "none"
      tags:
        description: "Tags to promote (comma-separated)"
        type: string
        required: true

jobs:
  promote:
    name: Promote Docker image
    runs-on: ubuntu-latest
    steps:
      - name: Validade input
        run: |
          if [[ ! "${{ inputs.target_env }}" =~ ^(staging|prod)$ ]]; then
            echo "Invalid environment. Choose 'staging' or 'prod'"
            exit 1
          fi

          if [[ ! "${{ inputs.source_env }}" =~ ^(dev|staging|none)$ ]]; then
            echo "Invalid environment. Choose 'dev', 'staging' or don't set it"
            exit 1
          fi

      - name: Set environment variables
        run: |
          if [[ "${{ inputs.source_env }}" == "none" ]]; then
            SOURCE_ENV=$([[ "${{ inputs.target_env }}" == "staging" ]] && echo "dev" || echo "staging")
            echo "SOURCE_ENV=${SOURCE_ENV}" >> $GITHUB_ENV
          else
            SOURCE_ENV="${{ inputs.source_env }}"
            echo "SOURCE_ENV=${SOURCE_ENV}" >> $GITHUB_ENV
          fi

          SOURCE_IMAGE="${{ inputs.jfrog_url }}/${{ inputs.group_name }}-oci-local-${SOURCE_ENV}/${{ inputs.image_name }}"
          TARGET_IMAGE="${{ inputs.jfrog_url }}/${{ inputs.group_name }}-oci-local-${{ inputs.target_env }}/${{ inputs.image_name }}"
          echo "SOURCE_IMAGE=${SOURCE_IMAGE}" >> $GITHUB_ENV
          echo "TARGET_IMAGE=${TARGET_IMAGE}" >> $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Install JFrog CLI
        id: jfrog
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: https://${{ inputs.jfrog_url }}
        with:
          oidc-provider-name: github-nethermindeth

      - name: Login to Registry with OIDC
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ${{ inputs.jfrog_url }}
          username: ${{ steps.jfrog.outputs.oidc-user }}
          password: ${{ steps.jfrog.outputs.oidc-token }}

      - name: Setup oras cli
        uses: oras-project/setup-oras@8d34698a59f5ffe24821f0b48ab62a3de8b64b20 # v1.2.3

      - name: Promote Images
        id: promote
        run: |
          # Promote all specified tags
          IFS=',' read -ra TAGS <<< "${{ inputs.tags }}"
          for TAG in "${TAGS[@]}"; do
            source_image="${SOURCE_IMAGE}:${TAG}"
            target_image="${TARGET_IMAGE}:${TAG}"
            echo "Promoting ${source_image} to ${target_image}"

            oras cp -r ${source_image} ${target_image}

            # Get image digest and add it to the subject.checksums.txt file
            DIGEST=$(docker buildx imagetools inspect "${target_image}" --raw | sha256sum | cut -d' ' -f1)
            echo "${DIGEST}  ${TAG}" >> subject.checksums.txt
          done

      - name: Attest
        uses: actions/attest-build-provenance@db473fddc028af60658334401dc6fa3ffd8669fd # v2.3.0
        id: attest
        with:
          subject-name: ${{ env.TARGET_IMAGE }}
          subject-checksums: subject.checksums.txt
          push-to-registry: true

      - name: Record Promotion
        run: |
          echo "## Image Promotion :rocket:" >> $GITHUB_STEP_SUMMARY
          echo "- From: $SOURCE_IMAGE" >> $GITHUB_STEP_SUMMARY
          echo "- To: $TARGET_IMAGE" >> $GITHUB_STEP_SUMMARY
          echo "- Tags: ${{ inputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "- Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
