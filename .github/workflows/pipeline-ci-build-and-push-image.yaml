# This workflow is used to build and push Docker images to JFrog Artifactory.
# Structure of the workflow:
# - It is triggered by a workflow call.
# - It checks out the code from the repository.
# - It runs pre-commit hooks to ensure code quality.
# - If workflow triggered by a push to main, it creates a changelog and version bump using commitizen.
# - It defines the image tag.
# - It installs JFrog CLI and logs in to Artifactory using the OIDC token.
# - It sets up QEMU and Docker Buildx for multi-platform builds.
# - It builds and pushes the Docker image to Artifactory.
# - It collects environment variables and Git information for the build.
# - It adds the built images to the JFrog build context.
# - It publishes the build information to JFrog Artifactory.

name: CI pull request

on:
  workflow_call:
    inputs:
      is_pull_request:
        description: 'Is this a pull request?'
        type: boolean
        default: false
      artifactory_project:
        description: 'Key of the Artifactory project'
        type: string
        required: true
      image_reportory:
        description: 'Repository name'
        type: string
        required: true
      image_name:
        description: 'Name of the image to publish. Defaults to the repository name.'
        type: string
        required: false
        default: "${{ github.event.repository.name }}"
      platforms:
        description: 'Comma-separated list of platforms (e.g., linux/amd64,linux/arm64)'
        type: string
        required: true

permissions:
  id-token: write
  contents: write
  attestations: write

jobs:
  pipeline:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}

      - name: Run pre-commit
        uses: pre-commit/action@v3.0.1

      - id: cz
        if: inputs.is_pull_request == false
        name: Create bump and changelog
        uses: commitizen-tools/commitizen-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Define image tag
        id: set_tag
        run: |
          HEAD_REF=${{ github.head_ref }}
          HEAD_SLUG=${HEAD_REF//\//-}
          if [[ "${{ steps.cz.conclusion }}" == "success" ]]; then
            IMAGE_TAG=${{ steps.cz.outputs.version }}
          else
            IMAGE_TAG=${HEAD_SLUG}-${{ github.sha }}
          fi
          echo "HEAD_SLUG=${HEAD_SLUG}" >> $GITHUB_ENV
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV

      - name: Build and Push Image
        uses: NethermindEth/github-action-image-build-and-push@main
        with:
          jfrog_url: ${{ vars.JFROG_URL }}
          jfrog_project: ${{ inputs.artifactory_project }}
          registry_url: ${{ vars.JFROG_HOST }}/${{ inputs.image_reportory }}
          image_name: ${{ inputs.image_name }}
          image_tags: ${{ env.IMAGE_TAG }}
          platforms: ${{ inputs.platforms }}
          cache_from: type=gha
          cache_to: type=gha,mode=max

      - name: Publish JFrog build-info
        uses: NethermindEth/github-action-jfrog-build-info@main
        with:
          jfrog_url: ${{ vars.JFROG_URL }}
          jfrog_project: ${{ inputs.artifactory_project }}
          build_name: ${{ inputs.image_name }}
          build_number: ${{ env.HEAD_SLUG }}-${{ github.run_number }}
          image_reportory: ${{ inputs.image_reportory }}
          image_full_name: ${{ vars.JFROG_HOST }}/${{ inputs.image_reportory }}/${{ inputs.image_name }}
          image_tag: ${{ env.IMAGE_TAG }}
          platforms: ${{ inputs.platforms }}
