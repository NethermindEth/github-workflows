name: Package Helm Chart

on:
  workflow_call:
    inputs:
      jfrog_url:
        description: "URL of Artifactory server"
        type: string
        default: "https://nethermind.jfrog.io"
      chart_path:
        description: "Path to the Helm chart to package"
        type: string
        required: true
    secrets:
      artifactory_api_token:
        description: "API token for JFrog Artifactory"
        required: true

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Clone Nethermind Helm Charts Repository
        run: |
          git clone https://github.com/NethermindEth/charts.git
          cd charts
          ls -l

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: latest

      - name: Update Helm Dependencies
        run: |
          cd ${{ inputs.chart_path }}
          helm dependency update

      - name: Lint Helm Chart
        run: |
          cd ${{ inputs.chart_path }}
          helm lint .

      - name: Package Helm Chart
        run: |
          cd ${{ inputs.chart_path }}
          helm package . --app-version $(grep 'version:' Chart.yaml | awk '{print $2}')
          mv *.tgz ../../

      - name: Run Trivy vulnerability scanner in IaC mode
        id: trivy
        uses: aquasecurity/trivy-action@915b19bbe73b92a6cf82a1bc12b087c9a19a5fe2 # v0.28.0
        with:
          scan-type: 'config'
          scan-ref: './*.tgz'  # Scan the packaged chart
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
          output: 'trivy-results.txt'
        env:
          TRIVY_DB_REPOSITORY: public.ecr.aws/aquasecurity/trivy-db
          TRIVY_DISABLE_VEX_NOTICE: true

      - name: Set up JFrog CLI
        uses: jfrog/setup-jfrog-cli@f748a0599171a192a2668afee8d0497f7c1069df # v4.5.6

      - name: Configure JFrog CLI
        env:
          ARTIFACTORY_API_TOKEN: ${{ secrets.artifactory_api_token }}
          JFROG_URL: ${{ inputs.jfrog_url }}
        run: |
          echo "${ARTIFACTORY_API_TOKEN}" | jf config add nethermind \
            --url="${JFROG_URL}" \
            --interactive=false \
            --access-token-stdin

      - name: Publish Helm Chart to JFrog
        run: |
          jf rt u "*.tgz" "helm-local/"

      - name: Summary
        if: always()
        run: |
          echo "### Publish Status" >> $GITHUB_STEP_SUMMARY
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Helm chart published successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Helm chart publishing failed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "### Trivy Scan Output" >> $GITHUB_STEP_SUMMARY
          if [[ -f trivy-results.txt ]]; then
            echo "<details><summary>Click to expand</summary>" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            while IFS= read -r line; do
              if [[ $line == "┌"* ]]; then echo '```' >> $GITHUB_STEP_SUMMARY; fi
              echo "$line" >> $GITHUB_STEP_SUMMARY
              if [[ $line == *"┘" ]]; then echo '```' >> $GITHUB_STEP_SUMMARY; fi
            done < trivy-results.txt
            echo "</details>" >> $GITHUB_STEP_SUMMARY
          else
            echo "No Trivy report found." >> $GITHUB_STEP_SUMMARY
          fi