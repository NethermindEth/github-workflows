name: 'Build Docker Image'
description: ''

inputs:
  registry_username:
    description: 'Username for Artifactory'
    required: true
  registry_password:
    description: 'Password for Artifactory'
    required: true
  image_reportory:
    description: 'Repository name'
    required: true
  image_name:
    description: 'Name of the image'
    required: true
  image_tag:
    description: 'Tag of the image'
    required: true
  platforms:
    description: 'Comma-separated list of platforms (e.g., linux/amd64,linux/arm64)'
    required: true
  cache_from:
    description: 'List of external cache sources (e.g., type=local,src=path/to/dir)'
    default: type=gha
    required: false
  cache_to:
    description: 'List of cache export destinations (e.g., type=local,dest=path/to/dir)'
    default: type=gha,mode=max
    required: false
  add_tag_latest:
    description: 'Additionally push with latest tag'
    required: false
    default: 'false'

runs:
  using: "composite"
  steps:
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ vars.JFROG_HOST }}/${{ inputs.image_reportory }}
        username: ${{ secrets.ARTIFACTORY_ANGKOR_USERNAME }}
        password: ${{ secrets.ARTIFACTORY_ANGKOR_TOKEN_DEVELOPER }}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Generate image tags
      shell: bash
      run: |
        BUILD_TAGS="${{ vars.JFROG_HOST }}/${{ inputs.image_reportory }}/${{ inputs.image_name }}:${{ inputs.image_tag }}"
        if [[ "${{ inputs.add_tag_latest }}" == "true" ]]; then
          BUILD_TAGS="${BUILD_TAGS}\n${{ vars.JFROG_HOST }}/${{ inputs.image_reportory }}/${{ inputs.image_name }}:latest"
        fi
        echo "BUILD_TAGS=${BUILD_TAGS}" >> $GITHUB_ENV

    - name: Build and push
      id: build
      uses: docker/build-push-action@v6
      with:
        push: true
        platforms: ${{ inputs.platforms }}
        tags: ${{ env.BUILD_TAGS }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
