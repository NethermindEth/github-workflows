name: 'Publish build-info to JFrog'
description: 'Collects information about the build and publishes it to JFrog'

inputs:
  jfrog_project:
    description: 'Key of the JFrog project'
    required: true
  image_reportory:
    description: 'Repository name'
    required: true
  image_name:
    description: 'Name of the image'
    required: true
  image_tag:
    description: 'Tag of the image'
    required: true
  platforms:
    description: 'Comma-separated list of platforms (e.g., linux/amd64,linux/arm64)'
    required: true

runs:
  using: composite
  steps:
    - name: Install JFrog CLI
      uses: jfrog/setup-jfrog-cli@v4
      env:
        JF_URL: ${{ vars.JFROG_URL }}
        JF_PROJECT: ${{ inputs.jfrog_project }}
      with:
        oidc-provider-name: github-nethermindeth

    - name: JFrog build add context
      env:
        JFROG_CLI_BUILD_NAME: ${{ inputs.image_name }}
        JFROG_CLI_BUILD_NUMBER: ${{ inputs.image_tag }}-${{ github.run_number }}
      shell: bash
      run: |
        jf rt build-collect-env
        jf rt build-add-git        

    - name: JFrog build add images
      env:
        JFROG_CLI_BUILD_NAME: ${{ inputs.image_name }}
        JFROG_CLI_BUILD_NUMBER: ${{ inputs.image_tag }}-${{ github.run_number }}
      shell: bash
      run: |
        # Pull image manifest
        docker manifest inspect ${{ vars.JFROG_HOST }}/${{ inputs.image_reportory }}/${{ inputs.image_name }}:${{ inputs.image_tag }} > manifest.json
        
        # Iterate over platforms
        platforms=$(echo ${{ inputs.platforms }} | tr ',' ' ')
        for platform in $platforms; do
          os=$(echo $platform | cut -d'/' -f1)
          arch=$(echo $platform | cut -d'/' -f2)
          digest=$(jq -r \
            --arg os "${os}" \
            --arg arch "${arch}" \
            '.manifests[] | select(.platform.os==$os and .platform.architecture==$arch) | .digest' manifest.json)
          echo "${{ vars.JFROG_HOST }}/${{ inputs.image_reportory }}/${{ inputs.image_name }}:${{ inputs.image_tag }}@${digest}" > image-file
          jf rt build-docker-create --image-file=image-file ${{ inputs.image_reportory }}
        done

    - name: JFrog build publish
      env:
        JFROG_CLI_BUILD_NAME: ${{ inputs.image_name }}
        JFROG_CLI_BUILD_NUMBER: ${{ inputs.image_tag }}-${{ github.run_number }}
      shell: bash
      run: |
        jf rt build-publish
